#pragma once

namespace sys::http {

enum class status_code_type : std::uint32_t
{
    k_continue                        = 100u,
    k_switching_protocols             = 101u,
    k_processing                      = 102u,
    k_early_hints                     = 103u,
    k_ok                              = 200u,
    k_created                         = 201u,
    k_accepted                        = 202u,
    k_non_authoritative_information   = 203u,
    k_no_content                      = 204u,
    k_reset_content                   = 205u,
    k_partial_content                 = 206u,
    k_multi_status                    = 207u,
    k_already_reported                = 208u,
    k_im_used                         = 226u,
    k_multiple_choices                = 300u,
    k_moved_permanently               = 301u,
    k_found                           = 302u,
    k_see_other                       = 303u,
    k_not_modified                    = 304u,
    k_use_proxy                       = 305u,
    k_switch_proxy                    = 306u,
    k_temporary_redirect              = 307u,
    k_permanent_redirect              = 308u,
    k_bad_request                     = 400u,
    k_unauthorized                    = 401u,
    k_payment_required                = 402u,
    k_forbidden                       = 403u,
    k_not_found                       = 404u,
    k_method_not_allowed              = 405u,
    k_not_acceptable                  = 406u,
    k_proxy_authentication_required   = 407u,
    k_request_timeout                 = 408u,
    k_conflict                        = 409u,
    k_gone                            = 410u,
    k_length_required                 = 411u,
    k_precondition_failed             = 412u,
    k_payload_too_large               = 413u,
    k_uri_too_long                    = 414u,
    k_unsupported_media_type          = 415u,
    k_range_not_satisfiable           = 416u,
    k_expectation_failed              = 417u,
    k_im_a_teapot                     = 418u,
    k_misdirected_request             = 421u,
    k_unprocessable_entity            = 422u,
    k_locked                          = 423u,
    k_failed_dependency               = 424u,
    k_too_early                       = 425u,
    k_upgrade_required                = 426u,
    k_precondition_required           = 428u,
    k_too_many_requests               = 429u,
    k_request_header_fields_too_large = 431u,
    k_unavailable_for_legal_reasons   = 451u,
    k_internal_server_error           = 500u,
    k_not_implemented                 = 501u,
    k_bad_gateway                     = 502u,
    k_service_unavailable             = 503u,
    k_gateway_timeout                 = 504u,
    k_http_version_not_supported      = 505u,
    k_variant_also_negotiates         = 506u,
    k_insufficient_storage            = 507u,
    k_loop_detected                   = 508u,
    k_not_extended                    = 510u,
};

consteval auto to_string(http::status_code_type code)
{
    constexpr std::tuple<http::status_code_type, std::string_view> k_map[] =
    {
        { status_code_type::k_continue,                         std::string_view{"100 Continue"}                         },
        { status_code_type::k_switching_protocols,             std::string_view{"101 Switching Protocols"}              },
        { status_code_type::k_processing,                      std::string_view{"102 Processing"}                       },
        { status_code_type::k_early_hints,                     std::string_view{"103 Early Hints"}                      },
        { status_code_type::k_ok,                              std::string_view{"200 OK"}                               },
        { status_code_type::k_created,                         std::string_view{"201 Created"}                          },
        { status_code_type::k_accepted,                        std::string_view{"202 Accepted"}                         },
        { status_code_type::k_non_authoritative_information,   std::string_view{"203 Non-Authoritative Information"}    },
        { status_code_type::k_no_content,                      std::string_view{"204 No Content"}                       },
        { status_code_type::k_reset_content,                   std::string_view{"205 Reset Content"}                    },
        { status_code_type::k_partial_content,                 std::string_view{"206 Partial Content"}                  },
        { status_code_type::k_multi_status,                    std::string_view{"207 Multi-Status"}                     },
        { status_code_type::k_already_reported,                std::string_view{"208 Already Reported"}                 },
        { status_code_type::k_im_used,                         std::string_view{"226 IM Used"}                          },
        { status_code_type::k_multiple_choices,                std::string_view{"300 Multiple Choices"}                 },
        { status_code_type::k_moved_permanently,               std::string_view{"301 Moved Permanently"}                },
        { status_code_type::k_found,                           std::string_view{"302 Found"}                            },
        { status_code_type::k_see_other,                       std::string_view{"303 See Other"}                        },
        { status_code_type::k_not_modified,                    std::string_view{"304 Not Modified"}                     },
        { status_code_type::k_use_proxy,                       std::string_view{"305 Use Proxy"}                        },
        { status_code_type::k_switch_proxy,                    std::string_view{"306 Switch Proxy"}                     },
        { status_code_type::k_temporary_redirect,              std::string_view{"307 Temporary Redirect"}               },
        { status_code_type::k_permanent_redirect,              std::string_view{"308 Permanent Redirect"}               },
        { status_code_type::k_bad_request,                     std::string_view{"400 Bad Request"}                      },
        { status_code_type::k_unauthorized,                    std::string_view{"401 Unauthorized"}                     },
        { status_code_type::k_payment_required,                std::string_view{"402 Payment Required"}                 },
        { status_code_type::k_forbidden,                       std::string_view{"403 Forbidden"}                        },
        { status_code_type::k_not_found,                       std::string_view{"404 Not Found"}                        },
        { status_code_type::k_method_not_allowed,              std::string_view{"405 METHOD_NOT_ALLOWED"}               },
        { status_code_type::k_not_acceptable,                  std::string_view{"406 Not Acceptable"}                   },
        { status_code_type::k_proxy_authentication_required,   std::string_view{"407 Proxy Authentication Required"}    },
        { status_code_type::k_request_timeout,                 std::string_view{"408 Request Timeout"}                  },
        { status_code_type::k_conflict,                        std::string_view{"409 Conflict"}                         },
        { status_code_type::k_gone,                            std::string_view{"410 Gone"}                             },
        { status_code_type::k_length_required,                 std::string_view{"411 Length Required"}                  },
        { status_code_type::k_precondition_failed,             std::string_view{"412 Precondition Failed"}              },
        { status_code_type::k_payload_too_large,               std::string_view{"413 Payload Too Large"}                },
        { status_code_type::k_uri_too_long,                    std::string_view{"414 URI Too Long"}                     },
        { status_code_type::k_unsupported_media_type,          std::string_view{"415 Unsupported Media Type"}           },
        { status_code_type::k_range_not_satisfiable,           std::string_view{"416 Range Not Satisfiable"}            },
        { status_code_type::k_expectation_failed,              std::string_view{"417 Expectation Failed"}               },
        { status_code_type::k_im_a_teapot,                     std::string_view{"418 I'm a teapot"}                     },
        { status_code_type::k_misdirected_request,             std::string_view{"421 Misdirected Request"}              },
        { status_code_type::k_unprocessable_entity,            std::string_view{"422 Unprocessable Entity"}             },
        { status_code_type::k_locked,                          std::string_view{"423 Locked"}                           },
        { status_code_type::k_failed_dependency,               std::string_view{"424 Failed Dependency"}                },
        { status_code_type::k_too_early,                       std::string_view{"425 Too Early"}                        },
        { status_code_type::k_upgrade_required,                std::string_view{"426 Upgrade Required"}                 },
        { status_code_type::k_precondition_required,           std::string_view{"428 Precondition Required"}            },
        { status_code_type::k_too_many_requests,               std::string_view{"429 Too Many Requests"}                },
        { status_code_type::k_request_header_fields_too_large, std::string_view{"431 Request Header Fields Too Large"}  },
        { status_code_type::k_unavailable_for_legal_reasons,   std::string_view{"451 Unavailable For Legal Reasons"}    },
        { status_code_type::k_internal_server_error,           std::string_view{"500 Internal Server Error"}            },
        { status_code_type::k_not_implemented,                 std::string_view{"501 Not Implemented"}                  },
        { status_code_type::k_bad_gateway,                     std::string_view{"502 Bad Gateway"}                      },
        { status_code_type::k_service_unavailable,             std::string_view{"503 Service Unavailable"}              },
        { status_code_type::k_gateway_timeout,                 std::string_view{"504 Gateway Timeout"}                  },
        { status_code_type::k_http_version_not_supported,      std::string_view{"505 HTTP Version Not Supported"}       },
        { status_code_type::k_variant_also_negotiates,         std::string_view{"506 Variant Also Negotiates"}          },
        { status_code_type::k_insufficient_storage,            std::string_view{"507 Insufficient Storage"}             },
        { status_code_type::k_loop_detected,                   std::string_view{"508 Loop Detected"}                    },
        { status_code_type::k_not_extended,                    std::string_view{"510 Not Extended"}                     },
    };

    for ( auto [k_code, k_message] : k_map )
    {
        if ( k_code == code )
        {
            return k_message;
        }
    }

    return std::string_view{};
}

} // namespace sys::http
